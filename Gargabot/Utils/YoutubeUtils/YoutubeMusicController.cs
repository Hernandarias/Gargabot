using Gargabot.Parameters;
using Gargabot.Utils.DeezerUtils;
using Gargabot.Utils.Spotify;
using Newtonsoft.Json;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading.Tasks;
using System.Xml.Linq;
using YoutubeExplode;
using YoutubeExplode.Common;

namespace Gargabot.Utils.Youtube
{
    public static class YoutubeMusicController
    {
        public static async Task<string> getYoutubeMusicUrlFromCompleteTrackName(string search, bool secondTry)
        {
            string url = "";

            //This checks the Youtube Music search page to get the song url. This is not an easy task because Youtube Music sends the info in a pretty weird way, so we check the gotten the track's title and redo the task up to 3 times to get as close as we can to the actual url.

            try
            {

                string page = await getYotubeMusicSearchPage(search);

                //First videoId in the page (usually a music video)
                var videoIdMatch = Regex.Match(Regex.Unescape(page), "\"videoId\":\"(.*?)\"");
                if (videoIdMatch.Success)
                {
                    url = buildUrl(videoIdMatch.Groups[1].Value.Trim());
                    if (await YoutubeController.checkIfTitlesMatch(search.Substring(0, search.IndexOf("¡]")-1), url))
                    {
                        return url;
                    }
                }

                //First videoId after musicShelfRenderer (tends to be the correct one)
                var trackIdMatch = Regex.Match(Regex.Unescape(page), "musicShelfRenderer.*?\"musicVideoType\":\"(?!MUSIC_VIDEO_TYPE_PODCAST_EPISODE).*?\".*?\"videoId\":\"(.*?)\"");
                url = buildUrl(trackIdMatch.Groups[1].Value.Trim());
                if (await YoutubeController.checkIfTitlesMatch(search.Substring(0, search.IndexOf("¡]") - 1), url))
                {
                    return url;
                }
                else
                {
                    //First playlistId in the page (tends to be the album, but we check it only if the previous check is incorrect because, again, it is usually correct)
                    var playlistMatch = Regex.Match(Regex.Unescape(page), "\"watchPlaylistEndpoint.*?\"playlistId\":\"(.*?)\"");
                    if (playlistMatch.Success)
                    {
                        string auxUrl = await YoutubeController.checkIfPlaylistHasTrack(search.Substring(0, search.IndexOf("¡]") - 1), buildPlaylistUrl(playlistMatch.Groups[1].Value.Trim()));   
                        if (auxUrl != "")
                        {
                            return auxUrl;
                        }
                        else
                        {
                            if(!secondTry)
                            {
                                string newUrl=await getYoutubeMusicUrlFromCompleteTrackName(search.Substring(0, search.LastIndexOf("¡]") - 1), true);
                                if (newUrl != "")
                                {
                                    return newUrl;
                                }
                                else
                                {
                                    return url;
                                }
                            }
                            else
                            {
                                return "";
                            }
                        }
                    }
                }

            }
            catch
            {
                url = "";
            }
            return url;

        }

        public static async Task<string> getYoutubeMusicUrlFromISRC(string isrc)
        {
            string url = "";
            try
            {
                YoutubeClient yc = new YoutubeClient();
                var searchResults = await yc.Search.GetVideosAsync(isrc);
                if (searchResults.Count() > 0)
                {
                    var video = await yc.Videos.GetAsync(searchResults.First().Url);
                    if (video.Description.Trim().EndsWith("Auto-generated by YouTube."))
                    {
                        url = buildUrl(video.Id);
                    }
                }
            }
            catch { }
           
            return url;

        }

        public static async Task<string> getYoutubeMusicUrlFromQuery(string search)
        {
            try
            {
                string page = await getYotubeMusicSearchPage(search);
                var trackIdMatch = Regex.Match(Regex.Unescape(page), "\"queueTarget\":.*?\"(videoId)\":\"(.*?)\"");
                if (trackIdMatch.Success)
                {
                    
                    if(await YoutubeController.checkIfVideoIsAutogeneratedByYoutube(buildUrl(trackIdMatch.Groups[2].Value.Trim())))
                    {
                        return buildUrl(trackIdMatch.Groups[2].Value.Trim());
                    }
                    else
                    {
                        trackIdMatch = Regex.Match(Regex.Unescape(page), "musicShelfRenderer.*?\"musicVideoType\":\"(?!MUSIC_VIDEO_TYPE_PODCAST_EPISODE).*?\".*?\"videoId\":\"(.*?)\"");
                        if (trackIdMatch.Success)
                        {
                            return buildUrl(trackIdMatch.Groups[1].Value.Trim());
                        }
                        else
                        {
                            return "";
                        }
                    }   

                }
                else
                {
                    return "";
                }
            }
            catch
            {
                return "";
            }

        }

        public static async Task<string> getYotubeMusicSearchPage(string search)
        {
            try
            {
                using var client = new HttpClient();
                client.DefaultRequestHeaders.Add("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:108.0) Gecko/20100101 Firefox/108.0");

                return await client.GetStringAsync($"https://music.youtube.com/search?q={Uri.EscapeDataString(search)}");
            }
            catch
            {
                return "";
            }
        }



        public static async Task<string> GetRecommendationFromVideoId(string videoId, Dictionary<string, bool> history, bool repetition=false)
        {
            string recommendationUrl = "";
            try
            {

                YoutubeClient yc = new YoutubeClient();
                string playlistId = "RD";
                if (history.Count>0)
                {
                    playlistId += history.First().Key;
                }
                else
                {
                    playlistId += videoId;
                }
                var videos = await yc.Playlists.GetVideosAsync(playlistId);

                if (videos.Count > 0)
                {
                    if (history.Count >= 10) //Avoid too many skips
                        videos = videos.OrderBy(x => Guid.NewGuid()).ToList();

                    var visitedIndices = new Dictionary<int, bool>
                    {
                        { 0, true }
                    };

                    while (visitedIndices.Count < videos.Count)
                    {
                        int index = visitedIndices.Count;

                        visitedIndices.Add(index, true);

                        if (videos[index].Id != videoId && !history.ContainsKey(videos[index].Id))
                        {
                            var video = await yc.Videos.GetAsync(videos[index].Url);

                            if (video.Description.Trim().EndsWith("Auto-generated by YouTube."))
                            {
                                recommendationUrl = buildUrl(video.Id);
                                break;
                            }
                            else
                            {
                                DeezerTrack dt = await DeezerController.GetTrackFromQueryAsync(video.Title.Substring(0, Math.Min(80, video.Title.Length)));
                                if(!string.IsNullOrEmpty(dt.Isrc))
                                    recommendationUrl = await getYoutubeMusicUrlFromISRC(dt.Isrc);

                                if (string.IsNullOrEmpty(recommendationUrl))
                                {
                                    if(!string.IsNullOrEmpty(dt.FullTitle))
                                        recommendationUrl = await getYoutubeMusicUrlFromCompleteTrackName(dt.FullTitle, false);

                                    if(string.IsNullOrEmpty(recommendationUrl))
                                        recommendationUrl = await getYoutubeMusicUrlFromCompleteTrackName(video.Title.Substring(0, Math.Min(80, video.Title.Length)), false);

                                }
                                if (string.IsNullOrEmpty(recommendationUrl) || history.ContainsKey(getVideoIdFromUrl(recommendationUrl)))
                                {
                                    continue;
                                }

                                break;
                            }

                        }
                    }
                    if (string.IsNullOrEmpty(recommendationUrl))
                    {
                        if (repetition) //avoid infinite loop
                        {
                            return "";
                        }
                        return await GetRecommendationFromVideoId(history.Last().Key, history, true);
                    }
                }
            }
            catch { }
            return recommendationUrl;

        }


        public static async Task<string> GetRecommendationFromVideoIdAndSpotifyArtistId(string videoId, string artistId, Dictionary<string, bool> history)
        {
            string recommendationUrl = "";
            try
            {
                YoutubeClient yc = new YoutubeClient();
                var videos = await yc.Playlists.GetVideosAsync("RD" + videoId);

                if (videos.Count > 0)
                {
                    var visitedIndices = new HashSet<int>();
                    SpotifyController sutils = new SpotifyController(BotParameters.LoadFromJson(BotParameters.GetAppSettingsPath()).spotifyCredentials);

                    while (visitedIndices.Count < videos.Count)
                    {

                        int index = visitedIndices.Count;
                        visitedIndices.Add(index);

                        var currentVideo = videos[index];
                        if (currentVideo.Id == videoId || history.ContainsKey(currentVideo.Id))
                            continue;

                        var detailedVideo = await yc.Videos.GetAsync(currentVideo.Url);
                        bool isYtMusic = detailedVideo.Description.Trim().EndsWith("Auto-generated by YouTube.");
                        bool isTargetArtist = false;
                        string spotifyTrackId = "";

                        if (isYtMusic)
                        {
                            var descriptionLines = detailedVideo.Description.Split('\n');
                            if (descriptionLines.Length >= 3)
                            {
                                string trackInfo = descriptionLines[2].Replace("·", "-");
                                trackInfo = trackInfo.Substring(0, Math.Min(40, trackInfo.Length));
                                Tuple<string, List<string>> spotifySearch = await sutils.GetTrackAndArtistIdFromTrackName(trackInfo);
                                spotifyTrackId = spotifySearch.Item1;
                                foreach (var artist in spotifySearch.Item2)
                                {
                                    if (artist == artistId)
                                    {
                                        isTargetArtist = true;
                                        break;
                                    }
                                }
                            }
                        }
                        else
                        {
                            Tuple<string, List<string>> spotifySearch = await sutils.GetTrackAndArtistIdFromTrackName(detailedVideo.Title.Substring(0, Math.Min(80, detailedVideo.Title.Length)));
                            spotifyTrackId = spotifySearch.Item1;
                            foreach (var artist in spotifySearch.Item2)
                            {
                                if (artist == artistId)
                                {
                                    isTargetArtist = true;
                                    break;
                                }
                            }
                        }

                        if (isTargetArtist)
                        {
                            if (isYtMusic)
                            {
                                recommendationUrl = buildUrl(detailedVideo.Id);
                                break;
                            }
                            else
                            {
                                string isrc = await sutils.GetTrackISRC(spotifyTrackId);
                                if (!string.IsNullOrEmpty(isrc))
                                {
                                    recommendationUrl = await getYoutubeMusicUrlFromISRC(isrc);
                                    if (!string.IsNullOrEmpty(recommendationUrl) && !history.ContainsKey(getVideoIdFromUrl(recommendationUrl)))
                                    {
                                        break;
                                    }
                                }

                                string trackTitle = await sutils.GetTrackTitle(sutils.buildSpotifyUrl(spotifyTrackId));
                                recommendationUrl = await getYoutubeMusicUrlFromCompleteTrackName(trackTitle, false);
                                if (!string.IsNullOrEmpty(recommendationUrl) && !history.ContainsKey(getVideoIdFromUrl(recommendationUrl)))
                                {
                                    break;
                                }
                            }
                        }
                    }

                    //No artist match found in the playlist
                    if (string.IsNullOrEmpty(recommendationUrl))
                    {
                        var topTracksTuple = await sutils.GetTopTracksFromArtistId(artistId);
                        var topTrackIds = topTracksTuple.Item1;
                        var topTrackNames = topTracksTuple.Item2;
                        int index = 0;
                        foreach (var track in topTrackIds)
                        {
                            string isrc = await sutils.GetTrackISRC(track);
                            if (!string.IsNullOrEmpty(isrc))
                            {
                                recommendationUrl = await getYoutubeMusicUrlFromISRC(isrc);
                            }

                            if (string.IsNullOrEmpty(recommendationUrl))
                            {
                                recommendationUrl = await getYoutubeMusicUrlFromCompleteTrackName(topTrackNames[index], false);
                            }

                            if (!string.IsNullOrEmpty(recommendationUrl) && !history.ContainsKey(getVideoIdFromUrl(recommendationUrl)))
                                break;

                            index++;
                        }
                    }
                }
            }
            catch(Exception ex) {
                Console.WriteLine(ex.ToString());
            }

            return recommendationUrl;
        }



        private static string buildUrl(string videoId)
        {
            return "https://youtube.com/watch?v=" + videoId;
        }
        private static string buildPlaylistUrl(string playlistId)
        {
            return "https://youtube.com/playlist?list=" + playlistId;
        }   
        private static string getVideoIdFromUrl(string url)
        {
            string videoId = "";
            if (url.Contains("watch?v="))
            {
                videoId = url.Substring(url.IndexOf("watch?v=") + 8);
                if (videoId.Contains("&"))
                {
                    videoId = videoId.Substring(0, videoId.IndexOf("&"));
                }
            }
            return videoId;
        }

    }
}
