using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading.Tasks;

namespace Gargabot.Utils.Youtube
{
    public static class YoutubeMusicController
    {
        public static async Task<string> getYoutubeMusicUrlFromCompleteTrackName(string search, bool secondTry)
        {
            string url = "";

            //This checks the Youtube Music search page to get the song url. This is not an easy task because Youtube Music sends the info in a pretty weird way, so we check the gotten the track's title and redo the task up to 3 times to get as close as we can to the actual url.

            try
            {

                string page = await getYotubeMusicSearchPage(search);

                //First videoId in the page (usually a music video)
                var videoIdMatch = Regex.Match(Regex.Unescape(page), "\"videoId\":\"(.*?)\"");
                if (videoIdMatch.Success)
                {
                    url = buildUrl(videoIdMatch.Groups[1].Value.Trim());
                    if (await YoutubeController.checkIfTitlesMatch(search.Substring(0, search.IndexOf("¡]")-1), url))
                    {
                        return url;
                    }
                }

                //First videoId after musicShelfRenderer (tends to be the correct one)
                var trackIdMatch = Regex.Match(Regex.Unescape(page), "musicShelfRenderer.*?\"musicVideoType\":\"(?!MUSIC_VIDEO_TYPE_PODCAST_EPISODE).*?\".*?\"videoId\":\"(.*?)\"");
                url = buildUrl(trackIdMatch.Groups[1].Value.Trim());
                if (await YoutubeController.checkIfTitlesMatch(search.Substring(0, search.IndexOf("¡]") - 1), url))
                {
                    return url;
                }
                else
                {
                    //First playlistId in the page (tends to be the album, but we check it only if the previous check is incorrect because, again, it is usually correct)
                    var playlistMatch = Regex.Match(Regex.Unescape(page), "\"watchPlaylistEndpoint.*?\"playlistId\":\"(.*?)\"");
                    if (playlistMatch.Success)
                    {
                        string auxUrl = await YoutubeController.checkIfPlaylistHasTrack(search.Substring(0, search.IndexOf("¡]") - 1), buildPlaylistUrl(playlistMatch.Groups[1].Value.Trim()));   
                        if (auxUrl != "")
                        {
                            return auxUrl;
                        }
                        else
                        {
                            if(!secondTry)
                            {
                                string newUrl=await getYoutubeMusicUrlFromCompleteTrackName(search.Substring(0, search.LastIndexOf("¡]") - 1), true);
                                if (newUrl != "")
                                {
                                    return newUrl;
                                }
                                else
                                {
                                    return url;
                                }
                            }
                            else
                            {
                                return "";
                            }
                        }
                    }
                }

            }
            catch
            {
                url = "";
            }
            return url;

        }

        public static async Task<string> getYoutubeMusicUrlFromQuery(string search)
        {
            try
            {
                string page = await getYotubeMusicSearchPage(search);
                var trackIdMatch = Regex.Match(Regex.Unescape(page), "\"queueTarget\":.*?\"(videoId)\":\"(.*?)\"");
                if (trackIdMatch.Success)
                {
                    
                    if(await YoutubeController.checkIfVideoIsAutogeneratedByYoutube(buildUrl(trackIdMatch.Groups[2].Value.Trim())))
                    {
                        return buildUrl(trackIdMatch.Groups[2].Value.Trim());
                    }
                    else
                    {
                        trackIdMatch = Regex.Match(Regex.Unescape(page), "musicShelfRenderer.*?\"musicVideoType\":\"(?!MUSIC_VIDEO_TYPE_PODCAST_EPISODE).*?\".*?\"videoId\":\"(.*?)\"");
                        if (trackIdMatch.Success)
                        {
                            return buildUrl(trackIdMatch.Groups[1].Value.Trim());
                        }
                        else
                        {
                            return "";
                        }
                    }   

                }
                else
                {
                    return "";
                }
            }
            catch
            {
                return "";
            }

        }

        public static async Task<string> getYotubeMusicSearchPage(string search)
        {
            try
            {
                using var client = new HttpClient();
                client.DefaultRequestHeaders.Add("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:108.0) Gecko/20100101 Firefox/108.0");

                return await client.GetStringAsync($"https://music.youtube.com/search?q={Uri.EscapeDataString(search)}");
            }
            catch
            {
                return "";
            }
        }


        private static string buildUrl(string videoId)
        {
            return "https://youtube.com/watch?v=" + videoId;
        }
        private static string buildPlaylistUrl(string playlistId)
        {
            return "https://youtube.com/playlist?list=" + playlistId;
        }   
    }
}
