using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using YoutubeExplode;
using YoutubeExplode.Search;
using YoutubeExplode.Common;
using YoutubeExplode.Videos.Streams;
using Newtonsoft.Json;
using AngleSharp.Common;

namespace Gargabot.Utils.Youtube
{
    public static class YoutubeController
    {
        public static async Task<YoutubeVideo> getVideoInfo(string url)
        {
            try
            {
                YoutubeClient yc = new YoutubeClient();
                var video = await yc.Videos.GetAsync(url);
                YoutubeVideo yv = new YoutubeVideo(video.Title, url, video.Thumbnails[0].Url, video.Duration.ToString(), video.Author.ChannelTitle, video.Engagement.ViewCount.ToString(), video.Id);
                return yv;
            }
            catch
            {
                return null;
            }
        }

        public static async Task<List<YoutubeVideo>> getVideosFromPlaylist(string url)
        {
            List<YoutubeVideo> yvs = new List<YoutubeVideo>();
            try
            {
                YoutubeClient youtube = new YoutubeClient();
                var videos = await youtube.Playlists.GetVideosAsync(url);

                foreach (var video in videos)
                {
                    YoutubeVideo yv = new YoutubeVideo(video.Title, video.Url, video.Thumbnails[0].Url, video.Duration.ToString(), video.Author.ChannelTitle, 0.ToString(), video.Id);
                    yvs.Add(yv);
                }
                return yvs;
            }
            catch
            {
                return yvs;
            }
        }

        public static async Task<string> checkIfPlaylistHasTrack(string trackName, string url)
        {
            try
            {
                YoutubeClient youtube = new YoutubeClient();
                var videos = await youtube.Playlists.GetVideosAsync(url);

                int aux = 0;
                foreach (var video in videos)
                {
                    aux++;
                    if (video.Title.ToLower().Trim() == trackName.ToLower().Trim())
                    {
                        return video.Url;
                    }
                    else if(aux == 35) //Avoid too many checks
                    {
                        return "";
                    } 
                }
                return "";
            }
            catch
            {
                return "";
            }
        }

        public static async Task<YoutubeVideo> getFromQuery(string query)
        {
            var youtube = new YoutubeClient();
            int aux = 0;
            await foreach (VideoSearchResult result in youtube.Search.GetResultsAsync(query))
            {
                aux++;
                YoutubeVideo yv = new YoutubeVideo(result.Title, result.Url, result.Thumbnails[0].Url, result.Duration.ToString(), result.Author.ChannelTitle, 0.ToString(), result.Id);
                return yv;
            }
            return null;
        }

        public static async Task<string> getAudioRealUrl(string url)
        {
            YoutubeClient youtube = new YoutubeClient();
            var streamManifest = await youtube.Videos.Streams.GetManifestAsync(url);
            var streamInfo = streamManifest.GetAudioOnlyStreams().GetItemByIndex(1);
            return streamInfo.Url;
        }

        public static async Task<bool> checkIfTitlesMatch(string title, string url)
        {
            try
            {
                YoutubeClient yc = new YoutubeClient();
                var video = await yc.Videos.GetAsync(url);
                if (video.Title.ToLower().Trim() == title.ToLower().Trim())
                    return true;
                else
                    return false;
            }
            catch
            {
                return false;
            }
        }

        public static async Task<string> getFistVideoFromPlaylist(string url)
        {
            try
            {
                YoutubeClient youtube = new YoutubeClient();
                var videos = await youtube.Playlists.GetVideosAsync(url);
                return videos[0].Url;
            }
            catch
            {
                return "";
            }
        }

        public static async Task<bool> checkIfVideoIsAutogeneratedByYoutube(string url)
        {
            try
            {
                YoutubeClient youtube = new YoutubeClient();
                var video = await youtube.Videos.GetAsync(url);
                if (video.Description.Trim().EndsWith("Auto-generated by YouTube."))
                    return true;
                else
                    return false;
            }
            catch
            {
                return false;
            }
        }

    }
}
